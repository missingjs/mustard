#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import os
import subprocess
import sys
import docopt

BASE_PATH = os.path.dirname(os.path.realpath(sys.argv[0]))
BASE_PATH = os.path.dirname(BASE_PATH)


def case_compile(module):
    test_file = module + '.test.cpp'
    if not os.path.exists(test_file):
        code = os.system('ln -s ' + module + '.sample.cpp ' + test_file)
        if code != 0:
            exit()
    dic = {}
    dic['target'] = module + '.out'
    dic['include'] = '-I. -I' + BASE_PATH
    dic['library'] = '-L' + BASE_PATH + '/common -lmustard'
    dic['sources'] = '{0}.cpp {0}.test.cpp'.format(module)
    command = 'g++ -o {target} -std=c++11 {include} {sources} {library}'.format(**dic)
    code = os.system(command)
    if code != 0:
        exit()


def case_run(module, n_input):
    if n_input:
        n_input = int(n_input)
        if n_input <= 0:
            print 'Invalid --input: ' + str(n_input)
            exit()
    input_file_path = module + '.input'
    lines = []
    with open(input_file_path) as fin:
        lines = fin.readlines()
    lines.append('\n')

    exe_file = './' + module + '.out'
    inputs = []
    counter = 0
    lib_key = 'LD_LIBRARY_PATH'
    if lib_key not in os.environ:
        os.environ[lib_key] = '';
    os.environ['LD_LIBRARY_PATH'] += (':'+BASE_PATH+'/common')
    for i in xrange(0, len(lines)):
        if len(lines[i].strip()) == 0:
            counter += 1
            if n_input and n_input > 0 and counter != int(n_input):
                inputs = []
                continue
            print '\n===== [' + str(counter) + '] ====='
            if len(inputs) == 0:
                continue
            p = subprocess.Popen(exe_file, stdin=subprocess.PIPE)
            for line in inputs:
                print line.strip()
                p.stdin.write(line)
            p.stdin.close()
            exit_code = p.wait()
            if exit_code != 0:
                print '[warn] exit code: %d' % (exit_code,)
            inputs = []
        elif lines[i].strip()[0] == '#':
            continue
        else:
            inputs.append(lines[i])


def mustard_main():
    '''mustard main entry
Usage:
    mustard [-r] [-c] [--input=<N>] <case>
    mustard -h | --help
    mustard --version
Options:
    -h --help    Show this screen.
    --version    Show version.
    -r           Run case specified by <case>.
    -c           Compile case files.
    --input=<N>  Use (N)th input, first is 1.
'''

    arguments = docopt.docopt(mustard_main.__doc__, version="v1.0")

    do_run = arguments['-r']
    do_compile = arguments['-c']
    module = arguments['<case>']
    n_input = arguments['--input']

    if do_compile:
        case_compile(module)

    if do_run:
        case_run(module, n_input)

    if not do_compile and not do_run:
        case_compile(module)
        case_run(module, n_input)


if __name__ == '__main__':
    mustard_main()
